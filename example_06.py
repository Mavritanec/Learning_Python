# это итерируемый объект, он может возвращать элементы по одному с помощью цикла
items = [10, 20, 30]

# это итератор, с его помощью происходит перебор элементов в итерируемом объекте
# цикл for работает по итератору (каждый раз его вызывая)
iterator = items.__iter__()
print(iterator)
# или
# заметьте, что это разные объекты
print(iter(items))

# запустим цикл
for elem in iterator:
    print(elem, end=' ')

print('\nвторой цикл по итератору')
# теперь еще раз
for elem in iterator:
    print(elem, end=' ')
# цикл ничего не вывел, т.к. итератор "опустошился"
# это поведение характерно для генераторов

# "перезапустим" итератор
iterator = iter(items)
print(iterator)

# цикл for идет по итератору методом __next__
iterator.__next__()
# или
next(iterator)
# еще
next(iterator)
# мы опустошили итератор
# и теперь
next(iterator)
# эта ошибка (StopIteration) и служит для остановки цикла for
# итераторы используются для определения алгоритма обхода элементов
# в различных структурах данных, вплоть до случайного
# (т.к. далеко не всегда нужна именно линейная последовательность при обходе элементов)
